#!/usr/bin/env bash
#
# A dynamic scala runner, using coursier's app launch capabilities.
# Author: Dale Wijnand <dale.wijnand@gmail.com>
# https://github.com/dwijnand/scala-runners

app_name=$(basename "$0")

declare -r app_name
declare scala_version=latest.stable
declare -a java_args residual_args
declare verbose

declare -r scala_ea_builds_url=https://scala-ci.typesafe.com/artifactory/scala-integration
declare -r scala_pr_builds_url=https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots

echoerr() { echo >&2 "$@"; }
vlog()    { [[ -n "$verbose" ]] && echoerr "$@"; }

addJava()      {
  vlog "[addJava] arg = '$1'"
  java_args+=("-D")
  java_args+=("${1:2}")
}
addCoursier () {
  vlog "[addCoursier] arg = '$1'"
  coursier_args+=("$1")
}
getScalaNightly() {
  curl https://raw.githubusercontent.com/scala/community-builds/"$1"/nightly.properties 2>/dev/null | sed -n 's/nightly=\(.*\)/\1/p'
}
setResolver() {
  case "$1" in
    *-bin-*SNAPSHOT|*-pre-*SNAPSHOT) addCoursier "-r" && addCoursier "$scala_pr_builds_url" ;;
    *-bin-*|*-pre-*)                 addCoursier "-r" && addCoursier "$scala_ea_builds_url" ;;
  esac
}
setScalaVersion() {
  vlog "[setScalaVersion] arg = '$1'"
  case "$1" in
    2.11.x) scala_version=$(getScalaNightly 2.11.x) ;;
    2.12.x) scala_version=$(getScalaNightly 2.12.x) ;;
    2.13.x) scala_version=$(getScalaNightly 2.13.x) ;;
         *) scala_version="$1"
  esac
  setResolver "$scala_version"
}
setScalaPrVersion() {
  vlog "[setScalaPrVersion] arg = '$1'"
  local prInfo=$(curl -s https://api.github.com/repos/scala/scala/pulls/$1)
  local sha=$(echo -E $prInfo | jq -r '.head.sha')
  local sha7=${sha:0:7}
  local base_version=$(curl -s -H "Accept: application/vnd.github.v3.raw" "https://api.github.com/repos/scala/scala/contents/build.sbt?ref=pull/$1/head" | grep -E '(baseVersion in Global|Global / baseVersion\b)' | sed 's/.*"\(.*\)".*/\1/')
  local cross="-bin"
  (echo $base_version | grep -q -E '\d+\.\d+.0') && cross="-pre"
  scala_version=$base_version$cross-$sha7-SNAPSHOT
  setResolver "$scala_version"
}

require_arg() {
  local type="$1"
  local opt="$2"
  local arg="$3"

  if [[ -z "$arg" ]] || [[ "${arg:0:1}" == "-" ]]; then
    echo "Aborting: $opt requires <$type> argument"
    exit 1
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
                 -v) verbose=true && shift ;;
    --scala-version) require_arg version "$1" "$2" && setScalaVersion "$2" && shift 2 ;;
         --scala-pr) require_arg "PR number" "$1" "$2" && setScalaPrVersion "$2" && shift 2 ;;
                -28) setScalaVersion "2.8+"   && shift ;;
                -29) setScalaVersion "2.9+"   && shift ;;
               -210) setScalaVersion "2.10+"  && shift ;;
               -211) setScalaVersion "2.11+"  && shift ;;
               -212) setScalaVersion "2.12+"  && shift ;;
               -213) setScalaVersion "2.13+"  && shift ;;
              -211x) setScalaVersion "2.11.x" && shift ;;
              -212x) setScalaVersion "2.12.x" && shift ;;
              -213x) setScalaVersion "2.13.x" && shift ;;
                -C*) addCoursier "${1:2}"     && shift ;;
                -D*) addJava "$1"             && shift ;;
                  *) residual_args+=("$1")    && shift ;;
  esac
done

execRunner() {
  # print the arguments one to a line, quoting any containing spaces
  vlog "# Executing command line:" && {
    for arg; do
      if [[ -n "$arg" ]]; then
        if printf "%s\n" "$arg" | grep -q ' '; then
          printf >&2 "\"%s\"\n" "$arg"
        else
          printf >&2 "%s\n" "$arg"
        fi
      fi
    done
    vlog ""
  }

  "$@"
}

execRunner cs launch \
  "$app_name:$scala_version" \
  "${java_args[@]}" \
  "${coursier_args[@]}" \
  -- "${residual_args[@]}"
